// ðŸš€ Smart Accounting App: Petrol Station Version
// This React Native + Firebase project adds fuel sales tracking, shift logs, expenses, inventory, and Excel export
// This is beginner-friendly: you'll learn what each section does step by step

// ðŸ“¦ Project Setup Prompt
/*
1. Start a monorepo project (if not already):

   mkdir SmartAccountingApp
   cd SmartAccountingApp

   pnpm init
   pnpm install -w

   mkdir -p packages/{mobile,web,shared}

2. Inside "packages/shared", run:
   pnpm init -y

3. Add shared constants/types:
   shared/src/types.ts â†’
*/

// shared/src/types.ts
export interface FuelSale {
  id?: string;
  date: string;
  pumpId: string;
  fuelType: 'Petrol' | 'Diesel';
  litersSold: number;
  pricePerLiter: number;
  totalAmount: number;
  paymentMethod: 'Cash' | 'M-Pesa' | 'Card';
  attendantId: string;
}

export interface Shift {
  id?: string;
  attendantId: string;
  startTime: string;
  endTime?: string;
  sales: FuelSale[];
  totalCash: number;
  totalMpesas: number;
}

export interface StockItem {
  id?: string;
  name: string;
  quantity: number;
  unit: string;
  purchasePrice: number;
  sellingPrice: number;
}

export interface Expense {
  id?: string;
  date: string;
  category: string;
  amount: number;
  notes?: string;
  imageUrl?: string; // from OCR receipt
}

// shared/src/constants.ts
export const FUEL_TYPES = ['Petrol', 'Diesel'] as const;
export const PAYMENT_METHODS = ['Cash', 'M-Pesa', 'Card'] as const;

// âœ… Explanation:
// Youâ€™ve just defined the "shape" of the important data in your app.
// These types make it easy to ensure youâ€™re handling your data correctly throughout your code.

/*
Next step: Create reusable Firebase utility to handle reading/writing data.
Go to shared/src/firebase.ts
*/

// shared/src/firebase.ts
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
  apiKey: process.env.EXPO_PUBLIC_FIREBASE_API_KEY || 'dummy_key',
  authDomain: process.env.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN || 'dummy.firebaseapp.com',
  projectId: process.env.EXPO_PUBLIC_FIREBASE_PROJECT_ID || 'dummy_project',
  storageBucket: process.env.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET || 'dummy.appspot.com',
  messagingSenderId: process.env.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || '000000000000',
  appId: process.env.EXPO_PUBLIC_FIREBASE_APP_ID || '1:000000000000:web:0000000000000000'
};

// Prevent reinitialization in dev environments (e.g. Expo hot reload)
const app = getApps().length ? getApp() : initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);

// âœ… Explanation:
// This version uses environment variables, so you must define them in a `.env` file or in your environment.
// For development in Expo, you can create a file called `.env` in your project root:
//
// EXPO_PUBLIC_FIREBASE_API_KEY=your_key_here
// EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN=your_domain_here
// ...etc.

/*
ðŸ”§ Fuel Sales Entry Screen (mobile):
*/

// mobile/src/screens/FuelSaleForm.tsx
// ... [existing FuelSaleForm.tsx code remains unchanged] ...

/*
ðŸ”§ Shift Log Screen (mobile):
*/

// mobile/src/screens/ShiftLogScreen.tsx
import React, { useState } from 'react';
import { View, Text, Button, StyleSheet, Alert } from 'react-native';
import { collection, addDoc, Timestamp, updateDoc, doc } from 'firebase/firestore';
import { db, auth } from '@smart-accounting/shared/firebase';

const ShiftLogScreen = () => {
  const [shiftId, setShiftId] = useState<string | null>(null);
  const [startTime, setStartTime] = useState<string | null>(null);

  const startShift = async () => {
    const user = auth.currentUser;
    if (!user) return alert('Not logged in');

    try {
      const start = Timestamp.now().toDate();
      const docRef = await addDoc(collection(db, 'shifts'), {
        attendantId: user.uid,
        startTime: start.toISOString(),
        sales: [],
        totalCash: 0,
        totalMpesas: 0
      });
      setShiftId(docRef.id);
      setStartTime(start.toLocaleTimeString());
      Alert.alert('Shift Started', `Started at ${start.toLocaleTimeString()}`);
    } catch (err) {
      console.error(err);
      Alert.alert('Error', 'Could not start shift.');
    }
  };

  const endShift = async () => {
    if (!shiftId) return alert('No active shift');

    try {
      const end = Timestamp.now().toDate();
      const docRef = doc(db, 'shifts', shiftId);
      await updateDoc(docRef, {
        endTime: end.toISOString()
      });
      Alert.alert('Shift Ended', `Ended at ${end.toLocaleTimeString()}`);
      setShiftId(null);
      setStartTime(null);
    } catch (err) {
      console.error(err);
      Alert.alert('Error', 'Could not end shift.');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.label}>Shift Status: {shiftId ? `Started at ${startTime}` : 'No Active Shift'}</Text>
      <Button title="Start Shift" onPress={startShift} disabled={!!shiftId} />
      <Button title="End Shift" onPress={endShift} disabled={!shiftId} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { padding: 20 },
  label: { marginBottom: 10, fontWeight: 'bold' }
});

export default ShiftLogScreen;

// âœ… Explanation:
// This screen lets attendants start and end a shift, which gets saved in the Firestore `shifts` collection.
// It also records startTime and endTime, which can be used for daily summaries and reports.

/*
Coming up next:
âœ… Add expense tracker
âœ… Excel export
Would you like me to generate the Expense Tracker screen next?
*/
