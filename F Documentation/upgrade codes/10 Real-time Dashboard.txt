// ðŸš€ Smart Accounting App: Petrol Station Version
// React Native + Firebase + Web + Excel Export + Email Summary

// This is a complete MVP setup for recording fuel sales, tracking shifts, logging expenses, exporting reports, and getting daily email summaries.

/*
ðŸ“¦ 1. Core Features Implemented:
- FuelSaleForm.tsx (fuel logging)
- ShiftLogScreen.tsx (shift start/end)
- ExpenseForm.tsx (expense tracker)
- ExportScreen.tsx (mobile Excel export)
- DateRangeFilter.tsx (React Native date filter)
- DateRangeExport.tsx (Web Excel export with filter)
*/

/*
âœ… 2. Final README (suggested):
*/

// ... [README section remains unchanged]

/*
ðŸ“¦ 3. Remaining Code for Mobile Navigator
*/

// ... [Mobile navigation code remains unchanged]

/*
ðŸ“¦ 4. Role-Based Access Control (Manager vs Attendant)
*/

// ... [Role hook remains unchanged]

/*
ðŸ“¦ 5. Offline Support (Firestore cache sync)
*/

// ... [Offline support config remains unchanged]

/*
ðŸ“¦ 6. Real-Time Dashboard (Web)
*/

// web/src/components/RealTimeDashboard.tsx
import React, { useEffect, useState } from 'react';
import { onSnapshot, collection } from 'firebase/firestore';
import { db } from '@smart-accounting/shared/firebase';

export default function RealTimeDashboard() {
  const [expenses, setExpenses] = useState([]);
  const [fuelSales, setFuelSales] = useState([]);

  useEffect(() => {
    const unsub1 = onSnapshot(collection(db, 'expenses'), (snap) => {
      setExpenses(snap.docs.map(doc => doc.data()));
    });
    const unsub2 = onSnapshot(collection(db, 'fuelSales'), (snap) => {
      setFuelSales(snap.docs.map(doc => doc.data()));
    });
    return () => { unsub1(); unsub2(); };
  }, []);

  return (
    <div style={{ padding: 20 }}>
      <h2>ðŸ“Š Real-Time Dashboard</h2>
      <p>Total Expenses: {expenses.reduce((sum, e) => sum + e.amount, 0)}</p>
      <p>Total Fuel Sales: {fuelSales.reduce((sum, s) => sum + s.totalAmount, 0)}</p>
    </div>
  );
}

/*
ðŸ“¦ 7. Admin Tools for Role Management (Web)
*/

// web/src/components/UserRoleManager.tsx
import React, { useEffect, useState } from 'react';
import { db } from '@smart-accounting/shared/firebase';
import { getDocs, collection, updateDoc, doc } from 'firebase/firestore';

export default function UserRoleManager() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      const snap = await getDocs(collection(db, 'users'));
      setUsers(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));
    };
    fetchUsers();
  }, []);

  const handleChangeRole = async (id, role) => {
    await updateDoc(doc(db, 'users', id), { role });
    setUsers(users.map(u => u.id === id ? { ...u, role } : u));
  };

  return (
    <div>
      <h2>ðŸ‘¥ User Role Management</h2>
      <ul>
        {users.map(user => (
          <li key={user.id}>
            {user.email} -
            <select value={user.role} onChange={e => handleChangeRole(user.id, e.target.value)}>
              <option value="attendant">Attendant</option>
              <option value="manager">Manager</option>
            </select>
          </li>
        ))}
      </ul>
    </div>
  );
}

/*
ðŸ“¦ 8. PDF Receipt Generation (after sale)
*/

// shared/src/utils/pdfReceipt.ts
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import * as FileSystem from 'expo-file-system';
import * as Sharing from 'expo-sharing';

export async function generateFuelSalePDF(sale) {
  const pdf = await PDFDocument.create();
  const page = pdf.addPage([300, 400]);
  const font = await pdf.embedFont(StandardFonts.Helvetica);

  const lines = [
    'Fuel Sale Receipt',
    `Date: ${sale.date}`,
    `Fuel Type: ${sale.fuelType}`,
    `Liters: ${sale.litersSold}`,
    `Price/Liter: ${sale.pricePerLiter}`,
    `Total: KES ${sale.totalAmount}`,
    `Payment: ${sale.paymentMethod}`
  ];

  lines.forEach((text, i) => {
    page.drawText(text, { x: 20, y: 360 - i * 25, size: 12, font, color: rgb(0, 0, 0) });
  });

  const pdfBytes = await pdf.save();
  const fileUri = FileSystem.documentDirectory + 'receipt.pdf';
  await FileSystem.writeAsStringAsync(fileUri, pdfBytes.toString('base64'), {
    encoding: FileSystem.EncodingType.Base64
  });

  if (await Sharing.isAvailableAsync()) await Sharing.shareAsync(fileUri);
}

// Use `generateFuelSalePDF(sale)` after a fuel sale is saved.

/*
âœ… Real-time dashboard, admin tools, and PDF receipt generation implemented.
