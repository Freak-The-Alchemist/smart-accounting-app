// ðŸš€ Smart Accounting App: Petrol Station Version
// This React Native + Firebase project adds fuel sales tracking, shift logs, expenses, inventory, and Excel export
// This is beginner-friendly: you'll learn what each section does step by step

// ðŸ“¦ Project Setup Prompt
/*
1. Start a monorepo project (if not already):

   mkdir SmartAccountingApp
   cd SmartAccountingApp

   pnpm init
   pnpm install -w

   mkdir -p packages/{mobile,web,shared}

2. Inside "packages/shared", run:
   pnpm init -y

3. Add shared constants/types:
   shared/src/types.ts â†’
*/

// shared/src/types.ts
export interface FuelSale {
  id?: string;
  date: string;
  pumpId: string;
  fuelType: 'Petrol' | 'Diesel';
  litersSold: number;
  pricePerLiter: number;
  totalAmount: number;
  paymentMethod: 'Cash' | 'M-Pesa' | 'Card';
  attendantId: string;
}

export interface Shift {
  id?: string;
  attendantId: string;
  startTime: string;
  endTime?: string;
  sales: FuelSale[];
  totalCash: number;
  totalMpesas: number;
}

export interface StockItem {
  id?: string;
  name: string;
  quantity: number;
  unit: string;
  purchasePrice: number;
  sellingPrice: number;
}

export interface Expense {
  id?: string;
  date: string;
  category: string;
  amount: number;
  notes?: string;
  imageUrl?: string; // from OCR receipt
}

// shared/src/constants.ts
export const FUEL_TYPES = ['Petrol', 'Diesel'] as const;
export const PAYMENT_METHODS = ['Cash', 'M-Pesa', 'Card'] as const;

// âœ… Explanation:
// Youâ€™ve just defined the "shape" of the important data in your app.
// These types make it easy to ensure youâ€™re handling your data correctly throughout your code.

/*
Next step: Create reusable Firebase utility to handle reading/writing data.
Go to shared/src/firebase.ts
*/

// shared/src/firebase.ts
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
  apiKey: process.env.EXPO_PUBLIC_FIREBASE_API_KEY || 'dummy_key',
  authDomain: process.env.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN || 'dummy.firebaseapp.com',
  projectId: process.env.EXPO_PUBLIC_FIREBASE_PROJECT_ID || 'dummy_project',
  storageBucket: process.env.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET || 'dummy.appspot.com',
  messagingSenderId: process.env.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || '000000000000',
  appId: process.env.EXPO_PUBLIC_FIREBASE_APP_ID || '1:000000000000:web:0000000000000000'
};

// Prevent reinitialization in dev environments (e.g. Expo hot reload)
const app = getApps().length ? getApp() : initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);

// âœ… Explanation:
// This version uses environment variables, so you must define them in a `.env` file or in your environment.
// For development in Expo, you can create a file called `.env` in your project root:
//
// EXPO_PUBLIC_FIREBASE_API_KEY=your_key_here
// EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN=your_domain_here
// ...etc.

/*
Coming up next:
âœ… Add fuel sale form screen
âœ… Add shift log screen
âœ… Add expense tracker
âœ… Excel export

Would you like me to scaffold the mobile UI components next for these features?
*/
