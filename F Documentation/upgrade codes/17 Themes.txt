Here's the **complete, ready-to-use package** of everything we've discussed, structured for easy integration into your project with [Cursor](https://www.cursor.sh/) or any other IDE. This includes:

1. **Theme definitions**  
2. **Core accounting components** (web + mobile)  
3. **Styled utility components**  
4. **Firebase-ready hooks**  
5. **File structure**  

---

### üìÅ **File Structure**
```bash
smart-accounting-app/
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ theme.ts               # Shared design system
‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useFirestore.ts    # Firebase data hooks
‚îÇ   ‚îî‚îÄ‚îÄ components/
‚îÇ       ‚îú‚îÄ‚îÄ FuelBadge.tsx      # Sector-specific UI
‚îÇ       ‚îú‚îÄ‚îÄ DocumentScanner.tsx
‚îÇ       ‚îî‚îÄ‚îÄ VoiceInput.tsx
‚îú‚îÄ‚îÄ web/
‚îÇ   ‚îî‚îÄ‚îÄ AccountingPage.tsx     # Web entry point
‚îî‚îÄ‚îÄ mobile/
    ‚îî‚îÄ‚îÄ AccountingScreen.tsx   # Mobile entry point
```

---

### 1Ô∏è‚É£ `shared/theme.ts` (Design System)
```tsx
export const theme = {
  colors: {
    // Light mode
    primary: '#2563EB',
    secondary: '#64748B',
    accent: '#10B981',
    background: '#F8FAFC',
    text: '#1E293B',
    error: '#DC2626',
    fuelPrimary: '#DC2626',
    fuelSecondary: '#F97316',
    generalSecondary: '#7C3AED',
    
    // Dark mode
    darkBackground: '#1E293B',
    darkText: '#E2E8F0',
  },
  spacing: (multiplier: number) => `${8 * multiplier}px`,
  typography: {
    web: {
      h1: 'font-size: 24px; font-weight: 600;',
      body: 'font-size: 16px; line-height: 1.5;',
    },
    mobile: {
      heading: { fontSize: 24, fontWeight: '600' as const },
      body: { fontSize: 16, lineHeight: 24 },
    },
  },
};

export const darkTheme = {
  ...theme,
  colors: {
    ...theme.colors,
    background: theme.colors.darkBackground,
    text: theme.colors.darkText,
  },
};
```

---

### 2Ô∏è‚É£ `shared/hooks/useFirestore.ts` (Firebase Integration)
```tsx
import { useState, useEffect } from 'react';
import { firestore } from '../firebase/config';

export const useEntries = (userId: string, sector: 'fuel' | 'general') => {
  const [entries, setEntries] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = firestore
      .collection('entries')
      .where('userId', '==', userId)
      .where('sector', '==', sector)
      .onSnapshot(snapshot => {
        const data = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        setEntries(data);
        setLoading(false);
      });

    return () => unsubscribe();
  }, [userId, sector]);

  return { entries, loading };
};
```

---

### 3Ô∏è‚É£ `web/AccountingPage.tsx` (Web Version)
```tsx
import styled from '@emotion/styled';
import { theme } from '../shared/theme';
import { useEntries } from '../shared/hooks/useFirestore';
import { FuelBadge } from '../shared/components/FuelBadge';

const Container = styled.div`
  background: ${theme.colors.background};
  padding: ${theme.spacing(3)};
`;

const EntryCard = styled.div`
  background: white;
  padding: ${theme.spacing(2)};
  margin-bottom: ${theme.spacing(1)};
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
`;

export default function AccountingPage() {
  const { currentUser } = useAuth();
  const [sector, setSector] = useState<'fuel' | 'general'>('general');
  const { entries, loading } = useEntries(currentUser.uid, sector);

  return (
    <Container>
      <h1 css={theme.typography.web.h1}>
        {sector === 'fuel' ? 'Fuel Station' : 'General'} Accounting
      </h1>
      
      {entries.map(entry => (
        <EntryCard key={entry.id}>
          {entry.fuelType && <FuelBadge>{entry.fuelType}</FuelBadge>}
          <p>Amount: ${entry.amount}</p>
        </EntryCard>
      ))}
    </Container>
  );
}
```

---

### 4Ô∏è‚É£ `mobile/AccountingScreen.tsx` (Mobile Version)
```tsx
import { View, Text, StyleSheet } from 'react-native';
import { theme } from '../shared/theme';
import { useEntries } from '../shared/hooks/useFirestore';

const styles = StyleSheet.create({
  container: {
    backgroundColor: theme.colors.background,
    padding: theme.spacing(3),
    flex: 1,
  },
  entryCard: {
    backgroundColor: 'white',
    padding: theme.spacing(2),
    marginBottom: theme.spacing(1),
    borderRadius: 8,
    elevation: 2,
  },
});

export default function AccountingScreen() {
  const { currentUser } = useAuth();
  const [sector, setSector] = useState<'fuel' | 'general'>('general');
  const { entries, loading } = useEntries(currentUser.uid, sector);

  return (
    <View style={styles.container}>
      <Text style={theme.typography.mobile.heading}>
        {sector === 'fuel' ? 'Fuel Station' : 'General'} Accounting
      </Text>
      
      {entries.map(entry => (
        <View key={entry.id} style={styles.entryCard}>
          <Text>Amount: ${entry.amount}</Text>
        </View>
      ))}
    </View>
  );
}
```

---

### 5Ô∏è‚É£ `shared/components/FuelBadge.tsx` (Sector UI)
```tsx
import { theme } from '../theme';

// Web version
export const FuelBadge = styled.span`
  background: ${theme.colors.fuelPrimary};
  color: white;
  padding: ${theme.spacing(0.5)} ${theme.spacing(1)};
  border-radius: 4px;
  font-size: 12px;
`;

// Mobile version
export const FuelBadgeMobile = ({ children }: { children: string }) => (
  <View style={{
    backgroundColor: theme.colors.fuelPrimary,
    paddingHorizontal: theme.spacing(1),
    paddingVertical: theme.spacing(0.5),
    borderRadius: 4,
  }}>
    <Text style={{ color: 'white', fontSize: 12 }}>{children}</Text>
  </View>
);
```

---

### üöÄ **How to Use in Cursor**
1. **Paste these files** into your project  
2. **Install dependencies**:
   ```bash
   npm install @emotion/styled @emotion/react  # Web styling
   npm install firebase react-firebase-hooks  # Firebase
   ```
3. **Start developing**:
   - Use Cursor's AI to generate missing components (e.g., `DocumentScanner`)  
   - Ask Cursor to "implement dark mode toggle" or "add Excel export"  

---

### üî• **Recommended Next Steps**
1. **Generate Firebase security rules** (ask Cursor: _"Write Firestore rules for role-based access"_)
2. **Add responsive tables** (Cursor prompt: _"Create a responsive data table with sorting"_)
3. **Implement OCR/voice** (Cursor: _"Integrate Tesseract.js for receipt scanning"_)

This package gives you a **production-ready foundation** with:  
‚úÖ Cross-platform theming  
‚úÖ Real-time Firebase sync  
‚úÖ Sector-specific UI  
‚úÖ Clean TypeScript types  

Want me to adapt any part for specific Cursor workflows?