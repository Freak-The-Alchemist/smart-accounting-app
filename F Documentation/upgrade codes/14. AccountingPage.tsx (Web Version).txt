import { useState, useEffect } from 'react';
import { useAuth } from '../shared/auth';
import { exportToExcel } from '../shared/utils';
import { DocumentScanner, VoiceInput } from '../components';

export default function AccountingPage() {
  const { currentUser } = useAuth();
  const [entries, setEntries] = useState<AccountingEntry[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [sector, setSector] = useState<'general' | 'fuel'>('general');

  useEffect(() => {
    // Fetch entries based on user role and sector
    const fetchEntries = async () => {
      setIsLoading(true);
      try {
        // TODO: Replace with actual Firebase query
        const mockEntries = await getEntries(currentUser.uid, sector);
        setEntries(mockEntries);
      } catch (error) {
        console.error('Error fetching entries:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchEntries();
  }, [currentUser, sector]);

  const handleNewEntry = (entry: AccountingEntry) => {
    setEntries([...entries, entry]);
    // TODO: Sync with Firebase
  };

  return (
    <div className="accounting-page">
      <div className="header">
        <h1>{sector === 'fuel' ? 'Fuel Station Accounting' : 'General Accounting'}</h1>
        <select 
          value={sector} 
          onChange={(e) => setSector(e.target.value as 'general' | 'fuel')}
          disabled={currentUser.role !== 'accountant'}
        >
          <option value="general">General</option>
          <option value="fuel">Fuel Station</option>
        </select>
      </div>

      <div className="input-methods">
        <DocumentScanner onScanComplete={(text) => console.log('Scanned:', text)} />
        <VoiceInput onTranscriptComplete={(text) => console.log('Voice:', text)} />
      </div>

      {isLoading ? (
        <div>Loading entries...</div>
      ) : (
        <>
          <div className="entries-list">
            {entries.map((entry) => (
              <div key={entry.id} className="entry-item">
                {/* Render entry details */}
              </div>
            ))}
          </div>

          <button 
            onClick={() => exportToExcel(entries)} 
            disabled={entries.length === 0}
          >
            Export to Excel
          </button>
        </>
      )}
    </div>
  );
}

type AccountingEntry = {
  id: string;
  date: Date;
  description: string;
  amount: number;
  category: string;
  // Additional fields for fuel station mode
  pumpNumber?: number;
  fuelType?: string;
};