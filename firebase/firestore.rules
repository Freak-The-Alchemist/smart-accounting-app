rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasValidData() {
      return request.resource.data.keys().hasAll(['createdAt', 'updatedAt']) &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && 
                      request.resource.data.keys().hasAll(['email', 'displayName']) &&
                      request.resource.data.email is string &&
                      request.resource.data.displayName is string;
      allow update: if isOwner(userId) && 
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['displayName', 'updatedAt']);
      allow delete: if isOwner(userId);
    }

    // Transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      hasValidData() &&
                      request.resource.data.keys().hasAll(['amount', 'type', 'category', 'description']);
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid &&
                      hasValidData() &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['amount', 'type', 'category', 'description', 'updatedAt']);
      allow delete: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid;
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }

    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      hasValidData();
      allow update, delete: if isAuthenticated() && 
                              resource.data.userId == request.auth.uid;
    }
  }
} 